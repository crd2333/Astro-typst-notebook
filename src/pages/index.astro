---
import { getCollection } from "astro:content";
import { Typst } from "astro-typst/src/components";
import { TypstDocInput } from "astro-typst/src/lib/prelude";
import Simp from "./simp.typ";
import SimpHtml from "./simp-html.typ?html";

const code = `
// #set page(width: 15em, height: auto, margin: 1em)
#let a = 123
#let b = 456
this is *html* content
#html.frame(block(width: 20em)[
this is *html.frame* content

#(str(a) + str(b)) Astro Typst Hello World
从军征遐路，讨彼东南夷。方舟顺广川，薄暮未安坻。白日半西山，桑梓有馀晖。蟋蟀夹岸鸣，孤鸟翩翩飞。征夫心多怀，凄凄令吾悲。下船登高防，草露沾我衣。回身赴床寝，此愁当告谁。身服干戈事，岂得念所私。即戎有授命，兹理不可违。
$oo$ $display(lim_(x → 0))$
])
$ cal(A) := { x in RR | x "is natural" } $
`;
const input: TypstDocInput = {
  mainFilePath: "src/pages/test.typ",
  inputs: {
    "something": "from Astro!",
  }
};

const collections = await getCollection("collection1");
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    <h1><samp>astro-typst</samp> component playground</h1>
    <main>
      <h2>0: Articles in the collection1</h2>
      <ul>
        {
          collections.map(({ slug, data }) => (
            <li>
              <a href={`/collection1/${slug}`}><h3>{data.title}</h3></a>
            </li>
          ))
        }
      </ul>
      <h2>1: string code</h2>
      <Typst code={code} target="html" />
      <h3>
        <code>width</code> set to <samp>"100%"</samp> and <code>height</code> set
        to <samp>"auto"</samp>
      </h3>
      <!-- <Typst code={code} width={"100%"} height={"auto"} /> -->
      <h2>2: <samp>simp.typ</samp></h2>
      <Simp />
      <h2>3: <samp>simp.typ html</samp></h2>
      <SimpHtml />
      <h2>4: <code>TypstDocInput</code></h2>
      <Typst input={input} />
      <h2>5: <code>mainFilePath</code></h2>
      <Typst src={input.mainFilePath!} />
    </main>
    <script>
      function findAncestor(el, cls) {
        while ((el = el.parentElement) && !el.classList.contains(cls));
        return el;
      }

      window.handleTypstLocation = function (elem, page, x, y) {
        const docRoot = findAncestor(elem, 'typst-doc');
        const children = docRoot.children;
        let nthPage = 0;
        for (let i = 0; i < children.length; i++) {
          if (children[i].tagName === 'g') {
            nthPage++;
          }
          if (nthPage == page) {
            const pageElement = children[i]; // Renamed 'page' to 'pageElement' to avoid conflict
            const dataWidth = pageElement.getAttribute('data-page-width');
            const dataHeight = pageElement.getAttribute('data-page-height');
            const rect = pageElement.getBoundingClientRect();
            const xOffsetInner = Math.max(0, x / dataWidth - 0.05) * rect.width;
            const yOffsetInner = Math.max(0, y / dataHeight - 0.05) * rect.height;
            const xOffsetInnerFix = (x / dataWidth) * rect.width - xOffsetInner;
            const yOffsetInnerFix = (y / dataHeight) * rect.height - yOffsetInner;

            const bodyOrRoot = document.body || document.firstElementChild; // Renamed 'docRoot' to 'bodyOrRoot'
            const basePos = bodyOrRoot.getBoundingClientRect();

            const xOffset = rect.left - basePos.left + xOffsetInner;
            const yOffset = rect.top - basePos.top + yOffsetInner;
            const left = xOffset + xOffsetInnerFix;
            const top = yOffset + yOffsetInnerFix;

            console.log('scrolling to', xOffset, yOffset, left, top);

            window.scrollTo(xOffset, yOffset);
            return;
          }
        }
      };
    </script>
  </body>
</html>
